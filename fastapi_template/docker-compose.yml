version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: music-db
    environment:
      POSTGRES_USER: music
      POSTGRES_PASSWORD: music
      POSTGRES_DB: musicdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U music -d musicdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - music-network

  api:
    build: .
    container_name: music-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://music:music@db:5432/musicdb
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - GENIUS_ACCESS_TOKEN=${GENIUS_ACCESS_TOKEN}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app:ro
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - music-network

  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: music-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - music-network

volumes:
  postgres_data:
  redis_data:

networks:
  music-network:
    driver: bridge