import lyricsgenius
import requests
from typing import Optional
import logging
from app.core.config import settings

logger = logging.getLogger(__name__)


class GeniusService:
    def __init__(self):
        self.access_token = settings.GENIUS_ACCESS_TOKEN
        self.client_id = settings.GENIUS_CLIENT_ID
        self.client_secret = settings.GENIUS_CLIENT_SECRET
        self.genius = None
        
        print(f"🔧 GENIUS SERVICE INIT DEBUG:")
        print(f"Access token: {self.access_token[:20] if self.access_token else 'None'}...")
        print(f"Client ID: {self.client_id[:10] if self.client_id else 'None'}...")
        print(f"Client Secret: {'Configured' if self.client_secret else 'Missing'}")
        
        # Try to initialize with access token first
        if self.access_token and len(self.access_token) > 10:
            try:
                self.genius = lyricsgenius.Genius(self.access_token)
                self.genius.verbose = False
                self.genius.remove_section_headers = True
                self.genius.skip_non_songs = False
                print("✅ Genius service initialized with access token")
            except Exception as e:
                print(f"❌ Failed to initialize with access token: {e}")
                self.genius = None

    def is_available(self) -> bool:
        """Check if Genius service is available"""
        return self.genius is not None

    async def get_lyrics(self, title: str, artist: str) -> Optional[str]:
        """Get lyrics for a song from Genius"""
        print(f"🎵 GETTING LYRICS FOR: '{title}' by '{artist}'")
        print(f"🔍 Service available: {self.is_available()}")
        
        if not self.is_available():
            print("❌ Genius API not available, returning NEW mock lyrics")
            return self._get_new_mock_lyrics(title, artist)
        
        try:
            # Clean up search terms
            clean_title = title.replace("(feat.", "feat.").replace(")", "")
            clean_artist = artist.split(",")[0].strip()
            
            print(f"🔍 Searching: '{clean_title}' by '{clean_artist}'")
            
            # Search for the song
            song = self.genius.search_song(clean_title, clean_artist)
            
            if song and hasattr(song, 'lyrics') and song.lyrics:
                print(f"✅ Found REAL lyrics for {title}")
                return song.lyrics
            else:
                print(f"❌ No lyrics found for {title} by {artist}")
                return f"[No lyrics found on Genius for '{title}' by '{artist}']\n\nSearched for: '{clean_title}' by '{clean_artist}'\nGenius API is working but this song may not be available."
                
        except Exception as e:
            print(f"❌ Error getting lyrics: {e}")
            return f"[Error fetching lyrics from Genius]\n\nError: {str(e)}\nSong: '{title}' by '{artist}'"

    def _get_new_mock_lyrics(self, title: str, artist: str) -> str:
        """Return NEW mock lyrics with current timestamp"""
        import datetime
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        return f"""[🆕 UPDATED MOCK LYRICS - {timestamp}]

Song: "{title}" by {artist}

[🔧 CURRENT GENIUS SERVICE STATUS]
✓ Service Updated: {timestamp}
✓ Access Token: {self.access_token[:20] if self.access_token else 'None'}...
✓ Token Length: {len(self.access_token) if self.access_token else 0} characters
✓ Service Available: {'YES' if self.is_available() else 'NO'}
✓ lyricsgenius installed: YES

[🚨 ISSUE DETECTED]
The Genius service has been updated but is still not working.
This means either:
1. The access token is still invalid (403 Forbidden)
2. Server cache is not cleared
3. The service needs to be reinitialized

[🎵 VERSE 1 - Updated Code]
This is the NEW mock lyric system
Generated at {timestamp}
If you're seeing this, the code WAS updated
But the Genius API authentication still fails

[🎵 CHORUS - Debug Info]
Token preview: {self.access_token[:15] if self.access_token else 'None'}...
Full length: {len(self.access_token) if self.access_token else 0} chars
Service status: {'AVAILABLE' if self.is_available() else 'NOT AVAILABLE'}
Last updated: {timestamp}

[🎵 OUTRO - Next Steps]
1. Verify the Genius token is valid and active
2. Check Genius dashboard for API usage/limits
3. Try generating a new access token
4. Consider using web scraping as fallback

Generated by: NEW GeniusService v2.0 at {timestamp}"""


# Create new global instance to force reload
genius_service = GeniusService()