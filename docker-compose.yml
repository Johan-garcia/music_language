services:
  db:
    image: postgres:16
    container_name: music_db
    environment:
      POSTGRES_USER: music
      POSTGRES_PASSWORD: music
      POSTGRES_DB: musicdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U music -d musicdb"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - music-network
    restart: unless-stopped

  api:
    build:
      context: ./fastapi_template
      dockerfile: Dockerfile
    container_name: music_api
    depends_on:
      db:
        condition: service_healthy
    env_file: 
      - ./fastapi_template/.env
    environment:
      DATABASE_URL: postgresql+asyncpg://music:music@db:5432/musicdb
      PYTHONPATH: /app
      BACKEND_CORS_ORIGINS: "http://localhost:3000,http://localhost:80,http://frontend:80"
    ports:
      - "8000:8000"
    volumes:
      - ./fastapi_template:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - music-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./react_frontend/frontend
      dockerfile: Dockerfile
    container_name: music_frontend
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    networks:
      - music-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  pgdata:
    driver: local

networks:
  music-network:
    driver: bridge